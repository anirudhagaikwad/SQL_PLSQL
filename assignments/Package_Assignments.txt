### 1: Create a Package to Manage Employee Salaries

Statement: Create a package to update employee salaries. The package should have:

1. A procedure to increase salary by a percentage.


2. A function to calculate the annual salary for a specific employee.


Solution:

-- Package Specification
CREATE OR REPLACE PACKAGE salary_management AS
   PROCEDURE increase_salary(emp_id NUMBER, percent NUMBER);
   FUNCTION annual_salary(emp_id NUMBER) RETURN NUMBER;
END salary_management;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY salary_management AS
   -- Procedure to increase salary
   PROCEDURE increase_salary(emp_id NUMBER, percent NUMBER) IS
   BEGIN
      UPDATE employees
      SET salary = salary + (salary * percent / 100)
      WHERE employee_id = emp_id;
   END increase_salary;

   -- Function to calculate annual salary
   FUNCTION annual_salary(emp_id NUMBER) RETURN NUMBER IS
      annual_sal NUMBER;
   BEGIN
      SELECT salary * 12 INTO annual_sal
      FROM employees
      WHERE employee_id = emp_id;
      RETURN annual_sal;
   END annual_salary;
END salary_management;
/

-- Test
BEGIN
   salary_management.increase_salary(100, 10);
   DBMS_OUTPUT.PUT_LINE('Annual Salary: ' || salary_management.annual_salary(100));
END;
/




### 2: Create a Package to Track Department Changes

Statement: Create a package to log department updates. Include:

1. A procedure to change an employee's department.


2. Log the changes in a custom table.



Solution:

-- Create a log table
CREATE TABLE department_log (
   log_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
   emp_id NUMBER,
   old_dept NUMBER,
   new_dept NUMBER,
   change_date DATE
);

-- Package Specification
CREATE OR REPLACE PACKAGE department_management AS
   PROCEDURE change_department(emp_id NUMBER, new_dept NUMBER);
END department_management;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY department_management AS
   PROCEDURE change_department(emp_id NUMBER, new_dept NUMBER) IS
      old_dept NUMBER;
   BEGIN
      -- Get the old department
      SELECT department_id INTO old_dept
      FROM employees
      WHERE employee_id = emp_id;

      -- Update the department
      UPDATE employees
      SET department_id = new_dept
      WHERE employee_id = emp_id;

      -- Log the change
      INSERT INTO department_log (emp_id, old_dept, new_dept, change_date)
      VALUES (emp_id, old_dept, new_dept, SYSDATE);
   END change_department;
END department_management;
/

-- Test
BEGIN
   department_management.change_department(101, 60);
END;
/




### 3: Create a Package to List High Earners

Statement: Create a package to fetch details of employees earning above a specified threshold. Include a procedure to display their details.

Solution:

-- Package Specification
CREATE OR REPLACE PACKAGE high_earners AS
   PROCEDURE list_high_earners(threshold NUMBER);
END high_earners;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY high_earners AS
   PROCEDURE list_high_earners(threshold NUMBER) IS
   BEGIN
      FOR rec IN (SELECT first_name, last_name, salary 
                  FROM employees 
                  WHERE salary > threshold) LOOP
         DBMS_OUTPUT.PUT_LINE('Name: ' || rec.first_name || ' ' || rec.last_name || ', Salary: ' || rec.salary);
      END LOOP;
   END list_high_earners;
END high_earners;
/

-- Test
BEGIN
   high_earners.list_high_earners(10000);
END;
/




### 4: Create a Package to Manage Job Titles

Statement: Create a package to manage job titles. It should include:

1. A procedure to update the job title for an employee.


2. A function to retrieve the current job title of an employee.



Solution:

-- Package Specification
CREATE OR REPLACE PACKAGE job_management AS
   PROCEDURE update_job(emp_id NUMBER, new_job VARCHAR2);
   FUNCTION get_job(emp_id NUMBER) RETURN VARCHAR2;
END job_management;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY job_management AS
   -- Procedure to update job
   PROCEDURE update_job(emp_id NUMBER, new_job VARCHAR2) IS
   BEGIN
      UPDATE employees
      SET job_id = new_job
      WHERE employee_id = emp_id;
   END update_job;

   -- Function to get current job
   FUNCTION get_job(emp_id NUMBER) RETURN VARCHAR2 IS
      job_title VARCHAR2(50);
   BEGIN
      SELECT job_id INTO job_title
      FROM employees
      WHERE employee_id = emp_id;
      RETURN job_title;
   END get_job;
END job_management;
/

-- Test
BEGIN
   job_management.update_job(101, 'SA_REP');
   DBMS_OUTPUT.PUT_LINE('Job Title: ' || job_management.get_job(101));
END;
/




### 5: Create a Package to Generate Reports

Statement: Create a package to generate basic reports. Include a procedure to display the number of employees in each department.

Solution:

-- Package Specification
CREATE OR REPLACE PACKAGE report_generator AS
   PROCEDURE employees_per_department;
END report_generator;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY report_generator AS
   PROCEDURE employees_per_department IS
   BEGIN
      FOR rec IN (SELECT department_id, COUNT(*) AS emp_count
                  FROM employees
                  GROUP BY department_id) LOOP
         DBMS_OUTPUT.PUT_LINE('Department: ' || rec.department_id || ', Employees: ' || rec.emp_count);
      END LOOP;
   END employees_per_department;
END report_generator;
/

-- Test
BEGIN
   report_generator.employees_per_department;
END;
/








