## Oracle - PLSQL ##

1) Syntax of block
-> BEGIN
      //code of block
   END;

2)Display output 
-> BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO ORACLE DB');
END;

3)Anonymous Block
-> DECLARE
   	a number;
   	b number;
   BEGIN
		a:=7;
		b:=88;
		dbms_output.put_line('sum of number is :'|| a+b);
END;
/

4) Turn on server output 
-> SET SERVEROUTPUT ON

5)Anonymous Block2
-> DECLARE
		m_msg varchar(255):='hello oracle';
M_MSG2 VARCHAR(255) DEFAULT 'HELLO PLSQL';
	BEGIN
		dbms_output.put_line(m_msg);
END;

6)Anonymous Block with Exception
-> DECLARE
		div_result number;
	 BEGIN
		div_result:=5/0;
	EXCEPTION
		WHEN ZERO_DIVIDE THEN
			DBMS.OUTPUT.PUT_LINE(SQLERRM);
END;

7) NOT ACCEPT NULL vALUE OR zERO LENGTH STRING
-> DECLARE
		i_state varchar(25) NOT NULL:='xyz';
	 BEGIN
		i_state:='';
END;

8)Anchored decleration
-> DECLARE
		C_EMPNAME EMP.EMPNAME%TYPE;
		C_LASTNAME EMP.LASTNAME%TYPE;
	 BEGIN
		SELECT EMPNAME,LASTNAME INTO C_EMPNAME,C_LASTNAME
    FROM EMP WHERE EMPID=3;
		DBMS_OUTPUT.PUT_LINE(C_EMPNAME ||':'||C_LASTNAME);
   END;
   /

9)DECLARE VARIABLES THAT ANCHOR TO ANOTHER VARIABLE
-> DECLARE
		E_SALARY EMP.SALARY%TYPE;
		E_AVG_SALARY E_SALARY%TYPE;
	  E_MAX_SALARY E_SALARY%TYPE;
		E_MIN_SALARY E_SALARY%TYPE;
	BIGIN
		SELECT 
			MIN(SALARY);
			MAX(SALARY);
			AVG(SALARY);
		INTO
			E_MIN_SALARY,
			E_MAX_SALARY,
			E_AVG_SALARY
	  FROM
			EMP;
		SELECT
			SALARY
		INTO
			E_SALARY
		FROM
			EMP;
		WHERE
			EMPID=3;
		DBMS_OUTPUT.PUT_LINE('MIN SALARY :'|| E_MIN_SALARY);
		DBMS_OUTPUT.PUT_LINE('MAX SALARY :'|| E_MAX_SALARY);
		DBMS_OUTPUT.PUT_LINE('AVG SALARY :'|| E_AVG_SALARY);
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY :'|| E_SALARY);
					

10) CONSTANTS
-> DECLARE
		EMP_PAYMENT CONSTANT NUMBER:=45000;
		EMP_PAYMENT_STATUS CONSTANT BOOLEAN :=FALSE;
	BEGIN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE PAYMENT :'|| EMP_PAYMENT);
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE PAYMENT STATUS :'|| EMP_PAYMENT_STATUS);

11) CIRCLE AREA
-> DECLARE
			CO_PI CONSTANT REAL := 3.14;
			CO_RADIUS CONSTANT REAL:=5;
			CO_AREA CONSTANT REAL:=(CO_PI*CO_RADIUS**2);
   BEGIN
			DBMS_OUTPUT.PUT_LINE(CO_AREA);
-- SINGLE LINE COMMENT
/*
MULTI LINE COMMENT
*/
   END;

12)IF STATEMENT
-> DECLARE
			SALES NUMBER:=50;
	 BEGIN
			IF SALES>30 THEN
					DBMS_OUTPUT.PUT_LINE('SALES IS GREATER THAN 30');
      END IF;
   END;

13)IF THEN ELSE
->		DECLARE
				SALES NUMBER:=150;
				COMMISSION NUMBER(10,2):=0;
		BEGIN
				IF SALES>200 THEN
						COMMISSION:=SALES*0.2;
						DBMS_OUTPUT.PUT_LINE('COMMISSION :'||COMMISSION);
				ELSE
						COMMISSION:=SALES*0.05;
						DBMS_OUTPUT.PUT_LINE('COMMISSION :'||COMMISSION);
				END IF;
		--DBMS_OUTPUT.PUT_LINE('COMMISSION :'||COMMISSION);
		END;

14)IF THEN ELSIF
->  DECLARE
					SALES NUMBER:=200;
					COMMISSION NUMBER(10,2):=0;
		BEGIN
					IF SALES>300 THEN
								COMMISSION:=SALES*0.2;
					ELSIF SALES>250 THEN
								COMMISSION:=SALES*0.05;
					ELSIF SALES>150 THEN
								COMMISSION:=SALES*0.4;
					ELSE
								COMMISSION:=0;
					END IF;
		DBMS_OUTPUT.PUT_LINE('COMMISSION :'||COMMISSION);
		END;		

15)SIMPLE CASE
-> DECLARE
			GRADE CHAR(1);
			RANK VARCHAR(15);
	 BEGIN
			GRADE:='A';
			CASE GRADE
								WHEN 'D' THEN
										RANK:='FAIL';	
								WHEN 'C' THEN
										RANK:='PASS';	                
								WHEN 'B' THEN
										RANK:='SECOND';									
								WHEN 'A' THEN
										RANK:='FIRST';	
      ELSE		 		
					RANK:='INVALID';
      END CASE;
    DBMS_OUTPUT.PUT_LINE('RANK IS :'||RANK);
   END; 

16)GOTO -
NOTE :
1)YOU CANNOT USE FOTO STATEMENT TO TRANSFER CONTROL OUT OF SUBPROFRAM OR INTO AN EXCEPTION HANDLER 
2) YOU CANNOT USE GOTO STATEMENT TO TRANSFER CONTROL FROM ONE CLAUSE TO ANOTHER CLAUSE IN IF STATEMENT
->			DECLARE
						SALES NUMBER;
						COMMISSION NUMBER;
			BEGIN	
						SALES:=500;
						--GOTO INSIDE_IF;
						IF SALES>400 THEN
										COMMISSION:=SALES*0.2;
										GOTO ZERO;
						ELSIF SALES>550 THEN
										COMMISION:=SALES*0.1;
						ELSE
								--<<ZERO>>
								COMMISSION:=0;		
						END IF;
						<<ZERO>>
						COMMISSION:=0;
			END;	

17)SIMPLE LOOP
->			DECLARE
						COUNT NUMBER:=0;
			BEGIN
						LOOP
								COUNT:=COUNT+1;
								IF COUNT>3 THEN
											EXIT;
								END IF;
								DBMS_OUTPUT.PUT_LINE('INSDIE LOOP :'||COUNT);
						END LOOP;
				DBMS_OUTPUT.PUT_LINE('OUTSDIE LOOP :'||COUNT);
			END;


18)LOOP WITH WHEN
-> DECLARE
						COUNT NUMBER:=0;
			BEGIN
						LOOP
								COUNT:=COUNT+1;
								
											EXIT WHEN COUNT>3;
								
								DBMS_OUTPUT.PUT_LINE('INSDIE LOOP :'||COUNT);
						END LOOP;
				DBMS_OUTPUT.PUT_LINE('OUTSDIE LOOP :'||COUNT);
			END;

19)FOR LOOP
-> DECLARE
					COUNT NUMBER:=10;
   BEGIN
					FOR COUNT IN 1..5 LOOP
							DBMS_OUTPUT.PUT_LINE('INSDIE LOOP :'||COUNT);
          END LOOP;
          DBMS_OUTPUT.PUT_LINE('OUTSDIE LOOP :'||COUNT);
	 END;
 
20)FOR LOOP
-> DECLARE
					COUNT NUMBER:=0;
   BEGIN
					FOR COUNT IN 1..5 LOOP
							DBMS_OUTPUT.PUT_LINE('INSDIE LOOP :'||COUNT);
          END LOOP;
          
   END;		

21)20)FOR LOOP STEP
-> DECLARE
					COUNT NUMBER:=2;
   BEGIN
					FOR COUNT_L IN 1..5 LOOP
					DBMS_OUTPUT.PUT_LINE('INSDIE LOOP :'||COUNT_L*COUNT);
          END LOOP;
          
   END;	

22)WHILE
->    DECLARE
					COUNT NUMBER:=1;
			BEGIN
					WHILE COUNT<=5
					LOOP
							DBMS_OUTPUT.PUT_LINE('COUNT:'||COUNT);
							COUNT=COUNT+1;
					END LOOP;
			END;
   
/*  COUNT:1....5 */

23)CONTINUE
->  BEGIN
				FOR INDEX_I IN 1..10
				LOOP
						IF MOD(INDEX_I,2)=1 THEN
									CONTINUE;
						END IF;
            DBMS_OUTPUT.PUT_LINE(INDEX_I);
				END LOOP;
		END;







  


